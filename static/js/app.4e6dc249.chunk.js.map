{"version":3,"sources":["models/MoviesResponse.ts","api/axios.ts","components/LogoSVG.tsx","Utils/colors.ts","components/MoviesRow.tsx","Utils/utils.ts","App.tsx","Utils/constants.ts"],"names":["Convert","json","JSON","parse","value","stringify","tmdb","axios","create","baseURL","interceptors","request","use","req","params","console","log","method","url","response","res","data","results","searchTMDB","type","query","defer","get","language","pipe","map","x","toMoviesResponse","filter","poster_path","overview","LogoSvg","props","viewBox","id","y1","x2","y2","gradientUnits","offset","stopColor","data-name","d","fill","COLORS","MoviesRow","imgPath","item","getButton","label","labelColor","backgroundColor","action","View","style","paddingVertical","paddingHorizontal","onPress","borderRadius","width","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","justifyContent","Text","color","fontSize","textAlign","fontWeight","styles","movieRow","posterContainer","Image","resizeMode","source","uri","poster","ratingContainer","Math","floor","vote_average","ScrollView","textContainer","movieTitle","title","buttonRow","Linking","canOpenURL","then","supported","openURL","toLowerCase","StyleSheet","flex","flexDirection","marginBottom","padding","paddingStart","position","left","bottom","App","useState","setQuery","movies","setMovies","tvShows","setTvShows","placeHolder","setPlaceHolder","index","setIndex","key","routes","peformSearch","a","async","subscribe","renderScene","SceneMap","movie","FlatList","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","keyExtractor","renderItem","tv","initialLayout","Dimensions","back","SafeAreaView","container","StatusBar","header","titleContainer","paddingTop","TextInput","search","placeholder","onChangeText","text","onSubmitEditing","TouchableOpacity","searchIcon","FontAwesome","name","size","navigationState","onIndexChange","i","renderTabBar","renderLabel","route","focused","indicatorStyle","Constants","statusBarHeight","alignItems","logo","paddingLeft","right","top"],"mappings":"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","file":"static/js/app.4e6dc249.chunk.js","sourcesContent":["export interface MoviesResponse {\n  total_pages: number;\n  results: Result[];\n  total_results: number;\n  page: number;\n}\n\nexport interface Result {\n  original_language: string;\n  original_title: string;\n  poster_path: string;\n  title: string;\n  vote_average: number;\n  popularity: number;\n  vote_count: number;\n  release_date: Date;\n  overview: string;\n  adult: boolean;\n  backdrop_path: string;\n  id: number;\n  genre_ids: number[];\n  video: boolean;\n}\n\n// Converts JSON strings to/from your types\nexport class Convert {\n  public static toMoviesResponse(json: string): MoviesResponse {\n    return JSON.parse(json);\n  }\n\n  public static moviesResponseToJson(value: MoviesResponse): string {\n    return JSON.stringify(value);\n  }\n}\n","import { API_KEY } from \"@env\";\nimport axios from \"axios\";\nimport { defer, Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Convert, Result } from \"../models/MoviesResponse\";\nimport { SearchType } from \"../Utils/utils\";\n\nconst tmdb = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\"\n});\n\ntmdb.interceptors.request.use(req => {\n  req.params[\"api_key\"] = API_KEY;\n\n  console.log(`${req.method} ${req.url}`);\n  // Important: request interceptors **must** return the request.\n  return req;\n});\n\ntmdb.interceptors.response.use(res => {\n  console.log(res.data.results[0]);\n  // Important: response interceptors **must** return the response.\n  return res;\n});\n\nexport const searchTMDB = (\n  type: SearchType,\n  query: string\n): Observable<Result[]> => {\n  return defer(() =>\n    tmdb.get(`/search/${type}`, {\n      params: {\n        language: \"en-US\",\n        query\n      }\n    })\n  ).pipe(\n    map(x =>\n      Convert.toMoviesResponse(JSON.stringify(x.data)).results.filter(\n        x => x.poster_path && x.overview\n      )\n    )\n  );\n};\n\nexport const searchMovie = async (query: string) => {\n  ///search/movie?api_key=a5968df59cc3e43725bcb8d5a89aa34c&language=en-US&query=Avengers\n  const res = await tmdb.get(\"/search/movie\", {\n    params: {\n      language: \"en-US\",\n      query\n    }\n  });\n  return Convert.toMoviesResponse(JSON.stringify(res.data));\n};\n\nexport const searchTV = async (query: string) => {\n  ///search/movie?api_key=a5968df59cc3e43725bcb8d5a89aa34c&language=en-US&query=Avengers\n  const res = await tmdb.get(\"/search/tv\", {\n    params: {\n      language: \"en-US\",\n      query\n    }\n  });\n  return Convert.toMoviesResponse(JSON.stringify(res.data));\n};\n","import * as React from \"react\";\nimport Svg, {\n  Defs,\n  G,\n  LinearGradient,\n  Path,\n  Stop,\n  SvgProps\n} from \"react-native-svg\";\n/* SVGR has dropped some elements not supported by react-native-svg: title */\n\nfunction LogoSvg(props: SvgProps) {\n  return (\n    <Svg viewBox=\"0 0 185.04 133.4\" {...props}>\n      <Defs>\n        <LinearGradient\n          id=\"prefix__a\"\n          y1={66.7}\n          x2={185.04}\n          y2={66.7}\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <Stop offset={0} stopColor=\"#90cea1\" />\n          <Stop offset={0.56} stopColor=\"#3cbec9\" />\n          <Stop offset={1} stopColor=\"#00b3e5\" />\n        </LinearGradient>\n      </Defs>\n      <G data-name=\"Layer 2\">\n        <Path\n          d=\"M51.06 66.7A17.67 17.67 0 0168.73 49h-.1A17.67 17.67 0 0186.3 66.7a17.67 17.67 0 01-17.67 17.67h.1A17.67 17.67 0 0151.06 66.7zm82.67-31.33h32.9A17.67 17.67 0 00184.3 17.7 17.67 17.67 0 00166.63 0h-32.9a17.67 17.67 0 00-17.67 17.7 17.67 17.67 0 0017.67 17.67zm-113 98h63.9a17.67 17.67 0 0017.67-17.67A17.67 17.67 0 0084.63 98h-63.9a17.67 17.67 0 00-17.67 17.7 17.67 17.67 0 0017.67 17.67zm83.92-49h6.25L125.5 49h-8.35l-8.9 23.2h-.1L99.4 49h-8.9zm32.45 0h7.8V49h-7.8zm22.2 0h24.95V77.2H167.1V70h15.35v-7.2H167.1v-6.6h16.25V49h-24zM10.1 35.4h7.8V6.9H28V0H0v6.9h10.1zm28.9 0h7.8V20.1h15.1v15.3h7.8V0h-7.8v13.2H46.75V0H39zm41.25 0h25v-7.2H88V21h15.35v-7.2H88V7.2h16.25V0h-24zm-79 49H9V57.25h.1l9 27.15H24l9.3-27.15h.1V84.4h7.8V49H29.45l-8.2 23.1h-.1L13 49H1.2zm112.09 49H126a24.59 24.59 0 007.56-1.15 19.52 19.52 0 006.35-3.37 16.37 16.37 0 004.37-5.5 16.91 16.91 0 001.72-7.58 18.5 18.5 0 00-1.68-8.25 15.1 15.1 0 00-4.52-5.53 18.55 18.55 0 00-6.73-3.02 33.54 33.54 0 00-8.07-1h-11.71zm7.81-28.2h4.6a17.43 17.43 0 014.67.62 11.68 11.68 0 013.88 1.88 9 9 0 012.62 3.18 9.87 9.87 0 011 4.52 11.92 11.92 0 01-1 5.08 8.69 8.69 0 01-2.67 3.34 10.87 10.87 0 01-4 1.83 21.57 21.57 0 01-5 .55h-4.15zm36.14 28.2h14.5a23.11 23.11 0 004.73-.5 13.38 13.38 0 004.27-1.65 9.42 9.42 0 003.1-3 8.52 8.52 0 001.2-4.68 9.16 9.16 0 00-.55-3.2 7.79 7.79 0 00-1.57-2.62 8.38 8.38 0 00-2.45-1.85 10 10 0 00-3.18-1v-.1a9.28 9.28 0 004.43-2.82 7.42 7.42 0 001.67-5 8.34 8.34 0 00-1.15-4.65 7.88 7.88 0 00-3-2.73 12.9 12.9 0 00-4.17-1.3 34.42 34.42 0 00-4.63-.32h-13.2zm7.8-28.8h5.3a10.79 10.79 0 011.85.17 5.77 5.77 0 011.7.58 3.33 3.33 0 011.23 1.13 3.22 3.22 0 01.47 1.82 3.63 3.63 0 01-.42 1.8 3.34 3.34 0 01-1.13 1.2 4.78 4.78 0 01-1.57.65 8.16 8.16 0 01-1.78.2H165zm0 14.15h5.9a15.12 15.12 0 012.05.15 7.83 7.83 0 012 .55 4 4 0 011.58 1.17 3.13 3.13 0 01.62 2 3.71 3.71 0 01-.47 1.95 4 4 0 01-1.23 1.3 4.78 4.78 0 01-1.67.7 8.91 8.91 0 01-1.83.2h-7z\"\n          fill=\"url(#prefix__a)\"\n          data-name=\"Layer 1\"\n        />\n      </G>\n    </Svg>\n  );\n}\n\nexport default LogoSvg;\n","export const COLORS = {\n  primary: \"#0d253f\",\n  secondary: \"#01b4e4\",\n  tertiary: \"#90cea1\"\n};\n","import React from \"react\";\nimport { Image, Linking, ScrollView, StyleSheet, Text, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { Result } from \"../models/MoviesResponse\";\nimport { COLORS } from \"../Utils/colors\";\nimport { getTmdbImage, SearchType } from \"../Utils/utils\";\n\ninterface Props {\n  item: Result;\n  type: SearchType;\n}\n\ninterface ButtonProps {\n  label: string;\n  backgroundColor: string;\n  action: VoidFunction;\n  labelColor: string;\n}\n\nconst MoviesRow = ({ item, type }: Props) => {\n  const openInBrowser = (id: Number) => {\n    Linking.canOpenURL(\"https://www.themoviedb.org/\" + type + \"/\" + id).then(\n      supported => {\n        if (supported) {\n          Linking.openURL(\n            \"https://www.themoviedb.org/\" + type.toLowerCase() + \"/\" + id\n          );\n        } else {\n          console.log(\n            \"Don't know how to open URI: \" +\n              \"https://www.themoviedb.org/\" +\n              type +\n              \"/\" +\n              id\n          );\n        }\n      }\n    );\n  };\n\n  const getButton = ({\n    label,\n    labelColor,\n    backgroundColor,\n    action\n  }: ButtonProps) => {\n    return (\n      <View style={{ paddingVertical: 8, paddingHorizontal: 8 }}>\n        <TouchableOpacity\n          onPress={action}\n          style={{\n            backgroundColor,\n            borderRadius: 15,\n            width: 50,\n            shadowColor: \"#000\",\n            shadowOffset: { width: 0, height: 1 },\n            shadowOpacity: 0.8,\n            shadowRadius: 2,\n            elevation: 5,\n            height: 30,\n            justifyContent: \"center\"\n          }}\n        >\n          <Text\n            style={{\n              color: labelColor,\n              fontSize: 12,\n              textAlign: \"center\",\n              fontWeight: \"700\"\n            }}\n          >\n            {label}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.movieRow}>\n      <View\n        style={{\n          ...styles.posterContainer,\n          shadowColor: \"#000\",\n          shadowOffset: { width: 0, height: 1 },\n          shadowOpacity: 0.8,\n          shadowRadius: 2,\n          borderRadius: 8,\n          elevation: 5\n        }}\n      >\n        <Image\n          resizeMode=\"cover\"\n          source={{ uri: getTmdbImage(item.poster_path) }}\n          style={[styles.posterContainer, styles.poster]}\n        />\n        <View style={styles.ratingContainer}>\n          <Text\n            style={{\n              textAlign: \"center\",\n              color: \"#fff\",\n              fontSize: 12,\n              fontWeight: \"normal\"\n            }}\n          >\n            {Math.floor(item.vote_average * 10) + \"%\"}\n          </Text>\n        </View>\n      </View>\n      <ScrollView style={styles.textContainer}>\n        <Text style={styles.movieTitle}>{item.title}</Text>\n        <Text>{item.overview}</Text>\n        <View style={styles.buttonRow}>\n          {getButton({\n            label: \"Play\",\n            labelColor: \"#fff\",\n            backgroundColor: COLORS.tertiary,\n            action: () => console.log(\"Playing: \" + item.title)\n          })}\n\n          {getButton({\n            label: \"View\",\n            labelColor: \"#000\",\n            backgroundColor: \"#fff\",\n            action: () => openInBrowser(item.id)\n          })}\n        </View>\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default MoviesRow;\n\nconst styles = StyleSheet.create({\n  poster: {\n    borderRadius: 8\n  },\n  posterContainer: {\n    width: 150,\n    height: 225\n  },\n  movieRow: {\n    flex: 1,\n    flexDirection: \"row\",\n    marginBottom: 8,\n    padding: 16\n  },\n  movieTitle: {\n    fontSize: 24,\n    fontWeight: \"700\"\n  },\n  textContainer: {\n    paddingStart: 10,\n    height: 225,\n    width: '100%'\n  },\n  buttonRow: {\n    flexDirection: \"row\",\n    paddingVertical: 8\n  },\n  ratingContainer: {\n    position: \"absolute\",\n    left: 8,\n    bottom: -20,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: COLORS.primary,\n    justifyContent: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.8,\n    shadowRadius: 2,\n    elevation: 5\n  }\n});\n","export const getTmdbImage = (imgPath: string): string => {\n  return `https://image.tmdb.org/t/p/original${imgPath}`;\n};\nexport type SearchType = \"tv\" | \"movie\";\n","import { FontAwesome } from \"@expo/vector-icons\";\nimport Constants from \"expo-constants\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useState } from \"react\";\nimport {\n  Dimensions,\n  FlatList,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from \"react-native\";\nimport { SceneMap, TabBar, TabView } from \"react-native-tab-view\";\nimport { searchTMDB } from \"./api/axios\";\nimport LogoSvg from \"./components/LogoSVG\";\nimport MoviesRow from \"./components/MoviesRow\";\nimport { Result } from \"./models/MoviesResponse\";\nimport { COLORS } from \"./Utils/colors\";\nimport {\n  PLACEHOLDER_MOVIE_SEARCH,\n  PLACEHOLDER_TV_SEARCH\n} from \"./Utils/constants\";\nimport { SearchType } from \"./Utils/utils\";\n\nexport default function App() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState<Result[]>();\n  const [tvShows, setTvShows] = useState<Result[]>();\n  const [placeHolder, setPlaceHolder] = useState(PLACEHOLDER_MOVIE_SEARCH);\n  const [index, setIndex] = useState(0);\n  const [routes] = useState([\n    { key: \"movie\", title: \"Movie\" },\n    { key: \"tv\", title: \"TV\" }\n  ]);\n\n  const peformSearch = async () => {\n    let type: SearchType = index == 0 ? \"movie\" : \"tv\";\n    searchTMDB(type, query).subscribe(results =>\n      type == \"movie\" ? setMovies(results) : setTvShows(results)\n    );\n  };\n\n  const MovieScreen = () => {\n    return (\n      <View>\n        <FlatList\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          data={movies}\n          keyExtractor={item => `${item.id}`}\n          renderItem={({ item }) => <MoviesRow type=\"movie\" item={item} />}\n        />\n      </View>\n    );\n  };\n\n  const TVScreen = () => {\n    return (\n      <View>\n        <FlatList\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          data={tvShows}\n          keyExtractor={item => `${item.id}`}\n          renderItem={({ item }) => <MoviesRow type={\"tv\"} item={item} />}\n        />\n      </View>\n    );\n  };\n  const renderScene = SceneMap({\n    movie: MovieScreen,\n    tv: TVScreen\n  });\n  const initialLayout = { width: Dimensions.get(\"window\").width };\n  const renderTabBar = (props: any) => (\n    <TabBar\n      {...props}\n      renderLabel={({ route, focused, color }) => (\n        <Text style={{ color: COLORS.secondary, fontSize: 16 }}>\n          {route.title}\n        </Text>\n      )}\n      indicatorStyle={{ backgroundColor: COLORS.tertiary }}\n      style={{ backgroundColor: COLORS.primary }}\n    />\n  );\n  return (\n    <View style={styles.back}>\n      <SafeAreaView style={styles.container}>\n        <StatusBar style=\"light\" />\n\n        <View style={styles.header}>\n          <LogoSvg width={50} height={50} />\n          <View style={styles.titleContainer}>\n            <Text style={styles.title}>TMDB Search</Text>\n          </View>\n        </View>\n        <View style={{ paddingTop: 8 }}>\n          <TextInput\n            style={styles.search}\n            placeholder={placeHolder}\n            onChangeText={text => setQuery(text)}\n            value={query}\n            onSubmitEditing={async () => await peformSearch()}\n          />\n          <TouchableOpacity\n            onPress={async () => await peformSearch()}\n            style={styles.searchIcon}\n          >\n            <FontAwesome name=\"search\" size={30} color=\"gray\" />\n          </TouchableOpacity>\n        </View>\n        <TabView\n          navigationState={{ index, routes }}\n          renderScene={renderScene}\n          onIndexChange={i => {\n            setIndex(i);\n            setPlaceHolder(\n              i == 0 ? PLACEHOLDER_MOVIE_SEARCH : PLACEHOLDER_TV_SEARCH\n            );\n          }}\n          initialLayout={initialLayout}\n          renderTabBar={renderTabBar}\n        />\n        {/* <View>\n          <FlatList\n            showsHorizontalScrollIndicator={false}\n            showsVerticalScrollIndicator={false}\n            data={movies}\n            keyExtractor={item => `${item.id}`}\n            renderItem={({ item }) => <MoviesRow item={item} />}\n          />\n        </View> */}\n      </SafeAreaView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  back: {\n    flex: 1,\n    paddingTop: Constants.statusBarHeight,\n    backgroundColor: COLORS.primary\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  },\n  header: {\n    padding: 16,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    backgroundColor: COLORS.primary\n  },\n  logo: {\n    width: 100,\n    height: 50\n  },\n  titleContainer: {\n    padding: 8\n  },\n  title: {\n    color: COLORS.secondary,\n    fontSize: 34,\n    fontWeight: \"bold\"\n  },\n  search: {\n    fontSize: 24,\n    paddingVertical: 8,\n    paddingLeft: 16\n  },\n  searchIcon: {\n    position: \"absolute\",\n    right: 16,\n    top: 8\n  }\n});\n","export const logoSrc =\n  \"https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_2-d537fb228cf3ded904ef09b136fe3fec72548ebc1fea3fbbd1ad9e36364db38b.svg\";\n\nexport const PLACEHOLDER_MOVIE_SEARCH = \"Search For Movie...\";\nexport const PLACEHOLDER_TV_SEARCH = \"Search For Tv Show...\";\n"],"sourceRoot":""}